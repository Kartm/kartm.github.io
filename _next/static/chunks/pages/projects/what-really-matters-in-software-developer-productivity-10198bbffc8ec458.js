(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[618],{1251:function(e,i,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/projects/what-really-matters-in-software-developer-productivity",function(){return t(7954)}])},7954:function(e,i,t){"use strict";t.r(i),t.d(i,{default:function(){return MDXContent},meta:function(){return p}});var s=t(5893),n=t(5675),r=t.n(n);let o={img:e=>(0,s.jsx)(r(),{sizes:"(max-width: 768px) 100vw, (max-width: 1200px) 75vw, 800px",...e,width:1200,height:800})};var a=t(7294),l=t(309),d=t(8495),c=t(3393),h=t.n(c);function ClientTOC(){return(0,a.useEffect)(()=>(l.ZP.init({tocSelector:".js-toc",contentSelector:"#article-content",headingSelector:"h1",ignoreSelector:"h1:first-child",activeLinkClass:h().activeLink,activeListItemClass:h().activeLi,extraLinkClasses:h().link,headingsOffset:60,scrollSmooth:!1}),()=>l.ZP.destroy()),[]),null}function ProjectLayout(e){let{children:i,meta:t}=e;return(0,s.jsx)(d.Z,{meta:t,children:(0,s.jsxs)("div",{className:h().container,children:[(0,s.jsx)("article",{id:"article-content",className:h().article,children:i}),(0,s.jsxs)("aside",{id:"article-toc",className:h().toc,children:[(0,s.jsx)("h5",{id:"toc-title",className:"toc-title",children:"In this post:"}),(0,s.jsx)("nav",{className:"js-toc",role:"navigation"})]}),(0,s.jsx)(ClientTOC,{})]})})}let p={title:"What really matters in software developer productivity: a 105-dev survey"};function _createMdxContent(e){let i={a:"a",blockquote:"blockquote",div:"div",em:"em",figcaption:"figcaption",figure:"figure",h1:"h1",h2:"h2",hr:"hr",img:"img",li:"li",p:"p",path:"path",span:"span",strong:"strong",svg:"svg",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...o,...e.components};return(0,s.jsxs)(ProjectLayout,{meta:p,children:[(0,s.jsxs)(i.h1,{id:"what-really-matters-in-software-developer-productivity-a-105-dev-survey",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#what-really-matters-in-software-developer-productivity-a-105-dev-survey",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"What really matters in software developer productivity: a 105-dev survey"]}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.em,{children:"Published 4 Oct 2025"})}),(0,s.jsxs)(i.p,{children:["In late 2024 I have conducted a ",(0,s.jsx)(i.strong,{children:"10-week-long survey on 105 developers"})," recruited from social media platforms (e.g. LinkedIn, Reddit), professional forums (e.g. HackerNews), and various software development communities. This allowed me to capture a wide range of backgrounds, including differences in experience level, technology stacks, team sizes, and organizational types."]}),(0,s.jsx)(i.p,{children:"My goal was simple: validate the anecdotal advice and see first-hand what has real impact on developer productivity."}),(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"TL;DR"})," — Jump to ",(0,s.jsx)(i.a,{href:"#conclusion",children:"key findings"}),"."]}),(0,s.jsx)(i.hr,{}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/age-distribution.svg",alt:"Respondent age group distribution",title:"Respondent age group distribution"}),(0,s.jsx)(i.figcaption,{children:"Respondent age group distribution"})]}),(0,s.jsxs)(i.p,{children:["More than 77% participants were under the age of 35, indicating that the survey mostly reached a ",(0,s.jsx)(i.strong,{children:"relatively young"})," segment of the industry. Age can influence familiarity with technologies and preferences for communication styles."]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/gender-distribution.svg",alt:"Respondent gender distribution",title:"Respondent gender distribution"}),(0,s.jsx)(i.figcaption,{children:"Respondent gender distribution"})]}),(0,s.jsx)(i.p,{children:"Around 85% respondents were male."}),(0,s.jsxs)(i.p,{children:["Female respondents accounted for around 12% of the responses. According to ",(0,s.jsx)(i.a,{href:"https://www.developernation.net/developer-reports/dn25/",children:"SlashData's 2023 Developer Nation survey"})," performed on 8380 developers, the share of female developers oscillates around 23% globally, indicating that this study might base on a sample that's underrepresenting the female part of the industry, therefore performing analysis between genders would make little sense and possibly introduce bias."]}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"The survey sample is skewed towards young (~77% under 35), male (~85%), and more experienced developers; juniors and women are under-represented."}),"\n"]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/job-role-distribution.svg",alt:"Respondent job role distribution",title:"Respondent job role distribution"}),(0,s.jsx)(i.figcaption,{children:"Respondent job role distribution"})]}),(0,s.jsx)(i.p,{children:"Around 86% of respondents reported being directly involved in development and engineering. Another 8% were also involved, but on a higher level (conceptual work, architecture and technical leadership). Remaining 6% were site administrators, support engineers or other roles."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/expertise-area-distribution.svg",alt:"Respondent primary expertise area vs work experience level distribution",title:"Respondent primary expertise area vs work experience level distribution"}),(0,s.jsx)(i.figcaption,{children:"Respondent primary expertise area vs work experience level distribution"})]}),(0,s.jsxs)(i.p,{children:["I have reached developers with wide ranges of experience levels, useful factor to compare later. Expertise areas were a multi-choice field. Most frequent choices are back-end & front-end development and DevOps, and were predominantly made by developers having more than 2 years of experience in the industry. Developers with ",(0,s.jsx)(i.strong,{children:"less experience seem to be significantly underrepresented"}),", therefore it wouldn't make sense to analyze junior developers in the survey."]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/project-scale-distribution.svg",alt:"Respondent-reported project scale distribution",title:"Respondent-reported project scale distribution"}),(0,s.jsx)(i.figcaption,{children:"Respondent-reported project scale distribution"})]}),(0,s.jsx)(i.p,{children:"Only 6% of respondents report to work in simple projects (involving predictable tasks, few dependencies, and straightforward requirements)."}),(0,s.jsx)(i.p,{children:"Project scale impacts the complexity and types of challenges teams face, with larger projects requiring more coordination and resources."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/workplace-team-distribution.svg",alt:"Respondent team and workplace size distribution",title:"Respondent team and workplace size distribution"}),(0,s.jsx)(i.figcaption,{children:"Respondent team and workplace size distribution"})]}),(0,s.jsx)(i.p,{children:"34% of participants are engaged in small teams of 3 to 5 members, while 44% operate within medium-sized teams consisting of 6 to 15 members. Making a comparison between these two team sizes is an opportunity to understand how team composition influences other measured factors."}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-caution",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-stop mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M4.47.22A.749.749 0 0 1 5 0h6c.199 0 .389.079.53.22l4.25 4.25c.141.14.22.331.22.53v6a.749.749 0 0 1-.22.53l-4.25 4.25A.749.749 0 0 1 11 16H5a.749.749 0 0 1-.53-.22L.22 11.53A.749.749 0 0 1 0 11V5c0-.199.079-.389.22-.53Zm.84 1.28L1.5 5.31v5.38l3.81 3.81h5.38l3.81-3.81V5.31L10.69 1.5ZM8 4a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"})}),"Caution"]}),(0,s.jsx)(i.p,{children:"Disclaimer: my analysis is not causal, as I interpret correlations only. Results are based on self-reported responses from a non-probability, online sample, which can introduce selection and response biases."}),"\n"]}),(0,s.jsxs)(i.h1,{id:"physical-work-environment",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#physical-work-environment",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Physical work environment"]}),(0,s.jsx)(i.p,{children:"Work environment is not only the physical space where developers work (remote, on-site, hybrid). It also includes the mental environment: team culture, motivation factors, stress levels."}),(0,s.jsxs)(i.p,{children:["First, to compare work environments (remote, hybrid, on-site), appropriate scales were introduced so that ",(0,s.jsx)(i.strong,{children:'higher values == "better"'}),"."]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/work-satisfaction-distribution.svg",alt:"Radar plot comparing satisfaction of remote, hybrid, and on-site respondents",title:"Radar plot comparing satisfaction of remote, hybrid, and on-site respondents"}),(0,s.jsx)(i.figcaption,{children:"Radar plot comparing satisfaction of remote, hybrid, and on-site respondents"})]}),(0,s.jsx)(i.p,{children:"Hybrid developers often report more frequent achievement recognition, whereas on-site developers seem to suffer more frequently from impostor syndrome yet report lower stress overall, suggesting social interaction might reduce stress but also provoke negative self-assessment."}),(0,s.jsx)(i.p,{children:"Summarizing by calculating the area of respective polygons indicates that hybrid developers generally report better well-being than on-site developers:"}),(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:(0,s.jsx)(i.strong,{children:"Environment"})}),(0,s.jsx)(i.th,{children:(0,s.jsx)(i.strong,{children:"Area"})})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Hybrid"}),(0,s.jsx)(i.td,{children:"31.6"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Remote"}),(0,s.jsx)(i.td,{children:"29.0"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"On-site"}),(0,s.jsx)(i.td,{children:"27.2"})]})]})]}),(0,s.jsxs)(i.p,{children:["Some open answers reveal that an in-office environment sets ",(0,s.jsx)(i.strong,{children:"better boundaries between personal and professional life"}),', and remote workers often find it hard to "switch off", as one respondent notes:']}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:"If you're not careful, working at home means you never truly leave 'the office.'"}),"\n"]}),(0,s.jsx)(i.p,{children:"Other respondents cite the need for better recognition and manager appreciation:"}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:"[...] how do we give the work done by developers the appropriate value and reward? I think that would improve productivity greatly."}),"\n"]}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:"Who the developer is matters more than anything. Want more productive people? Show them they matter to you. Treat people well and get out of their way."}),"\n"]}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"Respondent feedback seems to support the statement that the hybrid environment connects the best of both worlds and developers are generally more satisfied working in hybrid mode."}),"\n"]}),(0,s.jsx)(i.p,{children:"There are even more differences in how developers experience remote-only work."}),(0,s.jsx)(i.p,{children:"Remote teams enjoy flexibility and asynchronous work but risk more alignment calls, digital interruptions, and self-discipline hurdles. Onsite/hybrid teams benefit from rapid in-person collaboration yet face noise and social intrusions."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/age-groups-across-work-envs.svg",alt:"Distribution of work environments across age groups",title:"Distribution of work environments across age groups"}),(0,s.jsx)(i.figcaption,{children:"Distribution of work environments across age groups"})]}),(0,s.jsx)(i.p,{children:"Youngest developers are far more likely to be working in hybrid or onsite roles. It might reflect post-pandemic company policies that expect developers to be present in the office."}),(0,s.jsx)(i.p,{children:"In contrast, developers over 35 work mostly remotely. This may reflect a prioritization of work-life balance, especially for those with families."}),(0,s.jsxs)(i.h1,{id:"planning-and-resources",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#planning-and-resources",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Planning and resources"]}),(0,s.jsx)(i.p,{children:"Let's see how developers perceive their own momentum and ability to deliver on time."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/meeting-deadlines-distribution.svg",alt:"Distribution of frequencies of developers meeting their deadlines",title:"Distribution of frequencies of developers meeting their deadlines"}),(0,s.jsx)(i.figcaption,{children:"Distribution of frequencies of developers meeting their deadlines"})]}),(0,s.jsx)(i.p,{children:"On average, participants manage to deliver mostly on time."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/meeting-deadlines-across-developer-experience.svg",alt:"Distribution of frequencies of developers meeting their deadlines by developer experience level",title:"Distribution of frequencies of developers meeting their deadlines by developer experience level"}),(0,s.jsx)(i.figcaption,{children:"Distribution of frequencies of developers meeting their deadlines by developer experience level"})]}),(0,s.jsx)(i.p,{children:"Surprisingly, the average self-reported deadline meeting frequency slightly decreases with experience. It might be caused by the fact that junior developers have well-defined tasks, whereas senior developers usually have very vast tasks across many moving parts."}),(0,s.jsx)(i.p,{children:'With increased expertise, many experienced developers set a higher standard for defining a task as "done", introducing a possible self-critical bias when answering the survey.'}),(0,s.jsx)(i.p,{children:"Senior team members frequently wear multiple hats: mentoring, product coordination, production support. These extra responsibilities might cause additional overhead, delaying their own coding tasks and leading to missed deadlines."}),(0,s.jsx)(i.p,{children:"Overall, this does not necessarily imply that senior developers are less productive. Rather it suggests they may face more complex challenges, as one senior respondent noted in a separate comment:"}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:"A few days' delay on a major architectural change may feel more serious than a small missed deadline on an isolated ticket."}),"\n"]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/meeting-deadlines-by-obstacle-type.svg",alt:"Average deadline-reaching frequency by obstacle type",title:"Average deadline-reaching frequency by obstacle type"}),(0,s.jsx)(i.figcaption,{children:"Average deadline-reaching frequency by obstacle type"})]}),(0,s.jsx)(i.p,{children:"Developers lacking resources and developers complaining about unclear requirements were the group least effective in reaching deadlines. Let's explore this by comparing team sizes."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/deadline-obstacles-by-team-size.svg",alt:"Distribution of deadline-reaching obstacles by team size",title:"Distribution of deadline-reaching obstacles by team size"}),(0,s.jsx)(i.figcaption,{children:"Distribution of deadline-reaching obstacles by team size"})]}),(0,s.jsxs)(i.p,{children:["Scope creep appears universal across all team sizes, highlighting that no matter how large the team is, changing requirements and additional features remain a ",(0,s.jsx)(i.strong,{children:"main threat to on-time delivery"}),"."]}),(0,s.jsx)(i.p,{children:"Smallest teams were often subject to lack of resources (e.g. insufficient team members or missing tools) as a primary reason for missing deadlines. Most likely individuals have specialized skillsets, and any absence of expertise or tooling can cause major bottlenecks."}),(0,s.jsx)(i.p,{children:"Medium-sized teams show a more balanced distribution of obstacles, with scope creep and unclear requirements being consistently present. They typically have enough staff to handle various tasks but may face communication overhead or shifting priorities."}),(0,s.jsx)(i.p,{children:"Very large teams also reported lack of resources, which might seem counterintuitive at first. A possible explanation is that in big organizations, specialized resources are sometimes tied to specific departments, or bureaucratic processes slow down obtaining the right tools or staff."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/deadline-obstacles-by-workplace-size.svg",alt:"Distribution of deadline-reaching obstacles by workplace size ",title:"Distribution of deadline-reaching obstacles by workplace size "}),(0,s.jsx)(i.figcaption,{children:"Distribution of deadline-reaching obstacles by workplace size "})]}),(0,s.jsx)(i.p,{children:"Smallest workplaces frequently struggle with unclear requirements and rapid pivoting, which can make hitting deadlines more challenging. Their focus on speed and experimentation might overshadow formal planning."}),(0,s.jsx)(i.p,{children:"Medium-sized workplaces tend to have more stable processes, so they rather report scope creep or internal dependencies instead of constant requirement changes."}),(0,s.jsx)(i.p,{children:"Larger enterprises show a spread of different challenges: some mention hidden complexity in legacy systems. Even though they have more established procedures, the slow decision-making and multiple layers of management can slow progress."}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"Across team sizes and company sizes, scope creep and unclear requirements are the usual blockers of on-time delivery. Adding people doesn't fix unclear scope."}),"\n"]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/meeting-deadlines-by-team-size.svg",alt:"Distribution of deadline-reaching frequencies by team size ",title:"Distribution of deadline-reaching frequencies by team size "}),(0,s.jsx)(i.figcaption,{children:"Distribution of deadline-reaching frequencies by team size "})]}),(0,s.jsx)(i.p,{children:"The data indicates only minor differences in how often teams of various sizes manage to meet deadlines."}),(0,s.jsx)(i.p,{children:"No single team size clearly guarantees timely delivery. Instead, coordination, clarity of requirements, and resource availability seem to matter more than raw headcount."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/meeting-deadlines-by-workplace-size.svg",alt:"Distribution of deadline-reaching frequencies by workplace size ",title:"Distribution of deadline-reaching frequencies by workplace size "}),(0,s.jsx)(i.figcaption,{children:"Distribution of deadline-reaching frequencies by workplace size "})]}),(0,s.jsx)(i.p,{children:"Smallest workplaces are the most prone to missing deadlines, likely because they rely on quick pivots, minimal processes, and sometimes underdeveloped planning strategies. One survey respondent captured this perfectly:"}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:"I would start by improving the management, making it mandatory for them to be organized and to give requirements in a planned way. [...]"}),"\n"]}),(0,s.jsx)(i.p,{children:"Some big organizations still cope with heavy bureaucracy that can slow delivery, despite having more resources. As one respondent from a large workplace notes:"}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:'"Less bureaucracy in a large company."'}),"\n"]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/deadline-obstacles-across-developer-experience.svg",alt:"Distribution of deadline obstacles among developers with varying experience",title:"Distribution of deadline obstacles among developers with varying experience"}),(0,s.jsx)(i.figcaption,{children:"Distribution of deadline obstacles among developers with varying experience"})]}),(0,s.jsx)(i.p,{children:"It seems apparent that as developer gains experience, unclear requirements become less of a problem. They likely learn how to manage this properly. However, scope creep is a universal challenge across all experience levels."}),(0,s.jsxs)(i.h1,{id:"deployments-and-cicd",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#deployments-and-cicd",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Deployments and CI/CD"]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/deployment-time-distribution.svg",alt:"Distribution of deployment times among respondents",title:"Distribution of deployment times among respondents"}),(0,s.jsx)(i.figcaption,{children:"Distribution of deployment times among respondents"})]}),(0,s.jsx)(i.p,{children:"Most respondents can deploy changes in under 30 minutes, but around 30% mention they need an hour or more. Developers with longer deployment times often mention manual checks and gating processes, leading to decreased velocity."}),(0,s.jsx)(i.p,{children:"Comments from respondents suggest that manual steps create extra stress and slow the momentum of each release. However, it's not always possible to fully automate everything. Some teams deal with hardware dependencies or environment constraints that make continuous delivery hard. But for pure software teams, many see automation as a major boost to daily productivity."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/deployment-time-distribution-automated-vs-non-automated.svg",alt:"Distribution of deployment times among respondents who automate the process vs those who don't",title:"Distribution of deployment times among respondents who automate the process vs those who don't"}),(0,s.jsx)(i.figcaption,{children:"Distribution of deployment times among respondents who automate the process vs those who don't"})]}),(0,s.jsx)(i.p,{children:"Teams with automated deployment show a slightly faster average deployment time. While automation alone might not fix every bottleneck (e.g. compliance processes), generally those with automation in place achieve quicker, more predictable releases."}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"Basic CI/CD (builds, tests, deploy) is linked with shorter and more predictable releases. Automate the deployment path."}),"\n"]}),(0,s.jsxs)(i.h1,{id:"time-spent-on-coding",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#time-spent-on-coding",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Time spent on coding"]}),(0,s.jsx)(i.p,{children:"Lack of resources, organizational bottlenecks, and unclear requirements appear as main obstacles to meeting deadlines. Hidden complexity (technical debt, legacy code) and CI/test-related problems rank lower in this analysis. Perhaps developers manage to correctly estimate them."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/meeting-deadlines-by-obstacle-type.svg",alt:"Distribution of average deadline-reaching frequencies by deadline obstacle type",title:"Distribution of average deadline-reaching frequencies by deadline obstacle type"}),(0,s.jsx)(i.figcaption,{children:"Distribution of average deadline-reaching frequencies by deadline obstacle type"})]}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"Results suggest that unclear requirements can undermine deadline timelines just as much as lack of resources. If a team is already operating with limited manpower or budget, unclear or shifting project requirements can make things worse."}),"\n"]}),(0,s.jsx)(i.p,{children:"Legacy code and CI-related challenges are rarely deadline blockers. While legacy systems can be time-consuming, they are relatively predictable once developers understand the codebase. On the other side, unclear requirements can constantly shift, causing repeated rework. Their unpredictability creates far more serious risks to the schedule."}),(0,s.jsxs)(i.h1,{id:"communication-tools",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#communication-tools",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Communication tools"]}),(0,s.jsx)(i.p,{children:"Developers rarely have the freedom to choose their preferred communication tool, it is rather a requirement of the employer. Let's examine how satisfied they are with them."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/primary-collaboration-tool-usage.svg",alt:"Distribution of communication tools among respondents",title:"Distribution of communication tools among respondents"}),(0,s.jsx)(i.figcaption,{children:"Distribution of communication tools among respondents"})]}),(0,s.jsx)(i.p,{children:"Microsoft Teams seems to be the leader in big corporations, perhaps these companies already use the Microsoft Office suite, so it's a natural choice to opt in with Teams for additional integrations as they are already deep into the ecosystem."}),(0,s.jsx)(i.p,{children:"Other choices included Discord, Mattermost, internal tools and plain emails. They will not be extensively covered further."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/communication-tools-satisfaction.svg",alt:"Average communication tools ratings among respondents ",title:"Average communication tools ratings among respondents "}),(0,s.jsx)(i.figcaption,{children:"Average communication tools ratings among respondents "})]}),(0,s.jsx)(i.p,{children:"Slack's threading & organization was praised: many highlighted threaded conversations, flexible channel architecture, lightweight feel for daily tasks and advanced search. Developer workflows were easier to build thanks to integrations with GitHub/GitLab, slash commands."}),(0,s.jsx)(i.p,{children:'Microsoft Teams was appreciated for its integration with Outlook, corporate auth (AD/SSO), and the Office ecosystem and how calendar, calls, and chat are consolidated in one place to avoid distractions. However, it received negative feedback for being resource-heavy & bloated. Several respondents called it "slow", "clunky" or prone to random sign-outs, buggy screen-sharing issues. Teams forced to migrate from Slack reported negative morale and criticized poorer integration capabilities compared to Slack.'}),(0,s.jsx)(i.p,{children:"Google Chat received praise for being lightweight & quick to setup. Minimal clutter, easy adoption, and low friction if the team already uses Gmail or Google Docs. Perfect for basic messaging and smaller teams. Meeting links or simple file-sharing are easy to use. Some respondents noted its limitations: lacks powerful slash commands or robust thread management. In some cases accessibility is lacking: browser/extension incompatibilities, especially for text-based browsing."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/interruption-types-by-communication-tool.svg",alt:"Flow interruptions types by communication tool",title:"Flow interruptions types by communication tool"}),(0,s.jsx)(i.figcaption,{children:"Flow interruptions types by communication tool"})]}),(0,s.jsx)(i.p,{children:"Given Microsoft Teams' tight integration with Outlook, and Google Chat's integration with Gmail, it's unsurprising that these platforms might push more message or calendar alerts into developers' daily flow."}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"Tool choice slightly affects satisfaction (Slack > Chat > Teams in this sample), but interruption rate is affected more by work culture and scheduling than by the chat tool itself."}),"\n"]}),(0,s.jsxs)(i.h1,{id:"code-reviews",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#code-reviews",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Code reviews"]}),(0,s.jsx)(i.p,{children:"Peer code reviews are a common practice in software development teams. It's a means of finding errors and logical mistakes. However, extended review cycles can delay merges and cause bottlenecks, especially in busy teams. Let's discover how that impacts developers."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/code-review-wait-times.svg",alt:"Distribution of code review wait times",title:"Distribution of code review wait times"}),(0,s.jsx)(i.figcaption,{children:"Distribution of code review wait times"})]}),(0,s.jsxs)(i.p,{children:["Respondents can be naturally categorized depending on their impression on code reviews. Code reviews are ",(0,s.jsx)(i.em,{children:"fast"})," if performed within 24h, otherwise they are ",(0,s.jsx)(i.em,{children:"delayed"}),"."]}),(0,s.jsxs)(i.p,{children:["Additionally, developers were categorized based on the perceived impact of receiving code reviews: ",(0,s.jsx)(i.em,{children:"helpful"})," if code reviews are rated 4-5, ",(0,s.jsx)(i.em,{children:"unhelpful"})," otherwise."]}),(0,s.jsx)(i.p,{children:"Developers were grouped on these categories to assess how they rated their well-being."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/code-review-well-being.svg",alt:"Mean well-being categories by code review group",title:"Mean well-being categories by code review group"}),(0,s.jsx)(i.figcaption,{children:"Mean well-being categories by code review group"})]}),(0,s.jsxs)(i.p,{children:["When feedback is considered unhelpful and arrives late, developers report the ",(0,s.jsx)(i.strong,{children:"highest average stress level"})," across all groups."]}),(0,s.jsxs)(i.p,{children:["The exact opposite is observed if the feedback is helpful, regardless of being delayed: developers report the ",(0,s.jsx)(i.strong,{children:"lowest stress levels"})," on average. Most likely good feedback gives a sense of support and helps to celebrate achievements."]}),(0,s.jsxs)(i.p,{children:["Another group to consider is the one considering code reviews fast, but unhelpful. This group reports ",(0,s.jsx)(i.strong,{children:"high levels of impostor syndrome and rarely report receiving recognition"}),'. It\'s possible they find feedback inconstructive or purely "nitpicky", putting their work constantly under scrutiny without providing actual support, consisting of purely checking boxes and rarely involving any praise.']}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"Set review SLAs (less than 24 hours) and expectations (ask for reasoning, not nitpicks). Quality is more important than speed, but no one should wait days for feedback."}),"\n"]}),(0,s.jsxs)(i.h2,{id:"shared-ownership",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#shared-ownership",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Shared ownership"]}),(0,s.jsx)(i.p,{children:'In addition to timeliness and quality, some respondents highlighted the value of sharing ownership, and even distributing "blame" through collaborative code review practices:'}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:'"Blame on bugs plays a big role in software development. If the blame is spread across the team by Code Reviews and team tasks, I believe the team is healthier and happier".'}),"\n"]}),(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:'"[...] You can achieve a great result by having the right team leadership, great team culture or sharing team responsibilities (the more responsibility you have the more you care about product/project)".'}),"\n"]}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"Code reviews can promote collective accountability, reducing stress and promoting a positive team culture, particularly when everyone feels invested in the outcome. However, quality, tone, and collaborative spirit of feedback are also critical to reduce stress levels, impostor feelings, and to increase positive recognition."}),"\n"]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/code-review-wait-time-vs-quality.svg",alt:"Code review wait time vs. code review quality",title:"Code review wait time vs. code review quality"}),(0,s.jsx)(i.figcaption,{children:"Code review wait time vs. code review quality"})]}),(0,s.jsx)(i.p,{children:"This aligns with participants' answers to open-ended questions regarding their experiences with code reviews:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\uD83D\uDFE2 ",(0,s.jsx)(i.strong,{children:"Timely and constructive feedback"})," boosts developers' confidence. Even small acknowledgments of good coding practices or improvements helps them grow."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\uD83D\uDFE2 ",(0,s.jsx)(i.strong,{children:"Collaborative approach"})," and supportive, discussion-based review culture makes developers feel recognized and reduces impostor syndrome by showing that their work has real value."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\uD83D\uDFE2 ",(0,s.jsx)(i.strong,{children:"Learning opportunity"})," is an integral part of valuable code reviews. Respondents who praised them often viewed them as mentorship moments, where suggestions help them grow."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\uD83D\uDD34 ",(0,s.jsx)(i.strong,{children:"Prolonged wait times"})," increase stress and force context-switching, undermining developers' flow and leaving them uncertain about the quality of their prior work."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\uD83D\uDD34 ",(0,s.jsx)(i.strong,{children:'"Rubber-stamped" reviews'})," leave developers feeling underappreciated (lack of achievement acknowledgment) and provokes impostor syndrome, as they never receive substantial validation or guidance."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["\uD83D\uDD34 ",(0,s.jsx)(i.strong,{children:"Minimal praise and unclear expectations"})," isn't found helpful by developers, who rather want to understand why something is correct or praiseworthy. In the absence of valuable insight, they are unsure about their competence."]}),"\n"]}),"\n"]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/code-review-wait-time-vs-quality-across-dev-experience.svg",alt:"Perceived code review impact on quality per developer experience level",title:"Perceived code review impact on quality per developer experience level"}),(0,s.jsx)(i.figcaption,{children:"Perceived code review impact on quality per developer experience level"})]}),(0,s.jsx)(i.p,{children:"Junior developers tend to positively rate code reviews with longer wait times, a counterintuitive finding. Due to the minimal number of junior respondents, this is considered non-representative."}),(0,s.jsx)(i.p,{children:'Mid-level developers appreciate code reviews less when forced to wait longer. Timeliness seems crucial to maintaining flow and momentum in their daily tasks. Several respondents in this group reported fast reviews but described the feedback as unhelpful: describing the feedback as "contradictory", "purely nitpicking", or effectively nonexistent.'}),(0,s.jsx)(i.p,{children:"Senior developers show a higher tolerance towards slight delays (it might be a sign of extensiveness). Some respondents indicated that very long waits often result in no actual review, or solely a neutral/box-ticking process. Another respondent reported a mismatch in team expertise, where they receive minimal feedback from junior colleagues."}),(0,s.jsxs)(i.h1,{id:"technical-debt",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#technical-debt",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Technical debt"]}),(0,s.jsxs)(i.p,{children:["Technical debt can be boiled down to the accumulated cost of ",(0,s.jsx)(i.strong,{children:"suboptimal or quickly implemented"})," code that can slow down future development. While technical debt is often introduced for temporary reasons (e.g. meeting short-term deadlines or rapidly prototyping), it slows development down if left unaddressed. Many respondents mentioned legacy code, missing documentation, and poorly structured modules as factors slowing daily work."]}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/impact-of-time-spent-on-tech-debt.svg",alt:"Impact of time spent on paying down tech debt",title:"Impact of time spent on paying down tech debt"}),(0,s.jsx)(i.figcaption,{children:"Impact of time spent on paying down tech debt"})]}),(0,s.jsx)(i.p,{children:"It seems apparent that teams spending the most time on tech debt rarely reach deadlines, and at the same time report the highest number of deployments per month."}),(0,s.jsx)(i.p,{children:"Respondents spending more than 75% of their time paying tech debt are experiencing stress more often."}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsx)(i.p,{children:"High, unaddressed tech debt can lead not only to increased stress levels among developers, but also to delay project schedules."}),"\n"]}),(0,s.jsxs)(i.h2,{id:"open-ended-feedback-on-tech-debt",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#open-ended-feedback-on-tech-debt",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Open-ended feedback on tech debt"]}),(0,s.jsx)(i.p,{children:"Respondents had the possibility to explain how tech debt impacts their productivity."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/negative-tech-debt-impact-on-productivity.svg",alt:"Common words from feedback negatively rating the effect of tech debt on their productivity",title:"Common words from feedback negatively rating the effect of tech debt on their productivity"}),(0,s.jsx)(i.figcaption,{children:"Common words from feedback negatively rating the effect of tech debt on their productivity"})]}),(0,s.jsx)(i.p,{children:"Developers reporting negative impact of tech debt on their productivity see technical debt as an ongoing struggle. They regularly fight blockers whenever they try to implement new features."}),(0,s.jsx)(i.p,{children:"Many mention inherited undocumented systems that slow all tasks. Old code bases appear hard to work on, so each change risks new bugs or confusion."}),(0,s.jsx)(i.p,{children:"Respondents working solo or under tight deadlines rarely have opportunities for refactoring. Because no formal time is allocated, they only fix issues when absolutely necessary. Since higher-level leaders do not care about code quality, prioritizing quick feature delivery instead, over time the codebase becomes messy."}),(0,s.jsxs)(i.figure,{children:[(0,s.jsx)(i.img,{src:"/media/media/positive-tech-debt-impact-on-productivity.svg",alt:"Common words from feedback non-negatively rating the effect of tech debt on their productivity",title:"Common words from feedback non-negatively rating the effect of tech debt on their productivity"}),(0,s.jsx)(i.figcaption,{children:"Common words from feedback non-negatively rating the effect of tech debt on their productivity"})]}),(0,s.jsxs)(i.p,{children:["Developers perceiving tech debt as positive don't claim zero debt: rather they have ",(0,s.jsx)(i.strong,{children:"practical control"}),' over it. Some schedule refactoring or "technical debt tickets" each sprint. While debt is present, regular backlog management keeps it from getting out of control.']}),(0,s.jsxs)(i.div,{className:"markdown-alert markdown-alert-important",children:[(0,s.jsxs)(i.p,{className:"markdown-alert-title",children:[(0,s.jsx)(i.svg,{className:"octicon octicon-report mr-2",viewBox:"0 0 16 16",version:"1.1",width:"16",height:"16","aria-hidden":"true",children:(0,s.jsx)(i.path,{d:"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"})}),"Important"]}),(0,s.jsxs)(i.p,{children:["Regularly allocating time for debt appears beneficial. The best outcomes seem to appear when debt is managed in ",(0,s.jsx)(i.strong,{children:"consistent but balanced"})," manner, avoiding both full-blown rewrites and complete neglect."]}),"\n"]}),(0,s.jsxs)(i.h1,{id:"conclusion",children:[(0,s.jsx)(i.a,{"aria-hidden":"true",tabIndex:"-1",href:"#conclusion",children:(0,s.jsx)(i.span,{className:"icon icon-link"})}),"Conclusion"]}),(0,s.jsx)(i.p,{children:"The survey results present a common problem: most problems with developer productivity aren't caused by lack of talent, but rather friction in processes."}),(0,s.jsx)(i.p,{children:"What didn't move the needle:\r\nteam size alone - deadline rates were similar. Task clarity dominated outcomes.\r\noffice env policy - remote vs onsite were't silver bullets, hybrid slightly improved well-being.\r\nspeed without substance in code reviews."}),(0,s.jsx)(i.p,{children:"Practical recommendations on smoothing everyday processes:"}),(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Quick action step"}),(0,s.jsx)(i.th,{children:"Expected benefit"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Automate the small stuff"})," ",(0,s.jsx)("br",{})," - Configure basic CI/CD pipelines for builds, tests, and deployments ",(0,s.jsx)("br",{})," - Integrate code linters/formatters"]}),(0,s.jsx)(i.td,{children:"Reduces manual errors, saves developer time, and removes repetitive style discussions"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Improve task clarity"})," ",(0,s.jsx)("br",{})," - Remember to clear up uncertainties during daily stand-ups ",(0,s.jsx)("br",{})," - Thoroughly refine tickets before work begins"]}),(0,s.jsx)(i.td,{children:"Minimizes confusion, avoids rework caused by unclear requirements"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Tweak meeting cadence"})," ",(0,s.jsx)("br",{})," - Consolidate topics into one session ",(0,s.jsx)("br",{})," - Invite only essential participants"]}),(0,s.jsx)(i.td,{children:"Reduces context switching, frees up time for deep work"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Refine communication"})," ",(0,s.jsx)("br",{}),' - Introduce "quiet hours" ',(0,s.jsx)("br",{})," - Encourage asynchronous updates when possible"]}),(0,s.jsx)(i.td,{children:"Preserves concentration, decreases frequent interruptions"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Micro-refactoring"})," ",(0,s.jsx)("br",{})," - Schedule small refactoring tasks each sprint ",(0,s.jsx)("br",{}),' - Fix minor "code smells" early']}),(0,s.jsx)(i.td,{children:"Prevents technical debt from compounding over time"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Immediate recognition"})," ",(0,s.jsx)("br",{})," - Celebrate small wins with your team ",(0,s.jsx)("br",{})," - Acknowledge code review or task completions"]}),(0,s.jsx)(i.td,{children:"Boosts morale, promotes positive team culture"})]})]})]}),(0,s.jsx)(i.p,{children:"The most durable improvements come from reshaping team culture and re-defining technical foundations:"}),(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Long-term strategy"}),(0,s.jsx)(i.th,{children:"Expected benefit"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Implement effective planning"})," ",(0,s.jsx)("br",{})," - Adopt robust requirement practices (e.g. backlog grooming, user story mapping)"]}),(0,s.jsx)(i.td,{children:"Reduces misunderstandings and rework; improves transparency in project scope"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Promote a smooth code review culture"})," ",(0,s.jsx)("br",{})," - Define code review SLAs (e.g. max 24-hour turnaround)",(0,s.jsx)("br",{}),'- Emphasize mentorship by explaining the "why" behind suggestions']}),(0,s.jsx)(i.td,{children:"Keeps tasks flowing, improves knowledge sharing, and increases developer confidence"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Systematically address tech debt"})," ",(0,s.jsx)("br",{})," - Allocate a consistent share of each sprint (e.g. 10–20%) for refactoring",(0,s.jsx)("br",{}),'- Maintain a visible "technical debt board" to prioritize items by risk and impact']}),(0,s.jsx)(i.td,{children:"Prevents legacy issues from piling up; ensures sustainable code quality over time"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Promote adaptable work environments"})," ",(0,s.jsx)("br",{})," - Offer flexible policies (remote, on-site, or hybrid) based on team and project needs",(0,s.jsx)("br",{}),"- Use team-building events to maintain connection"]}),(0,s.jsx)(i.td,{children:"Balances productivity with well-being; mitigates isolation and helps retain talent"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsxs)(i.td,{children:[(0,s.jsx)(i.strong,{children:"Support well-being & recognition"})," ",(0,s.jsx)("br",{})," - Schedule regular 1:1s for feedback, goal-setting, and personal challenges",(0,s.jsx)("br",{}),'- Provide "no-blame" retrospectives and genuine appreciation for efforts']}),(0,s.jsx)(i.td,{children:"Builds psychological safety, reduces burnout, and improves teamwork"})]})]})]}),(0,s.jsx)(i.p,{children:"Clarify scope, automate the path to prod, keep reviews helpful—and throughput rises without burning people out."})]})}function MDXContent(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}={...o,...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)}},8495:function(e,i,t){"use strict";t.d(i,{Z:function(){return MainLayout}});var s=t(5893);t(1879),t(3216);var n=t(1664),r=t.n(n),o=t(1163),a=t(2975),l=t.n(a);function Header(){let e=(0,o.useRouter)();return(0,s.jsx)("header",{className:l().header,children:(0,s.jsx)("nav",{className:l().nav,children:(0,s.jsx)("ul",{children:[{href:"/",title:"Home"},{href:"/projects/what-really-matters-in-software-developer-productivity",title:"Projects"}].map(i=>(0,s.jsx)("li",{className:e.asPath===i.href?l().active:"",children:(0,s.jsx)(r(),{href:i.href,children:i.title})},i.href))})})})}var d=t(6443),c=t.n(d);function Footer(){let e=new Date().getFullYear();return(0,s.jsxs)("footer",{className:c().footer,children:["Copyright \xa9 ",e]})}var h=t(9008),p=t.n(h);function MainLayout(e){let{children:i,meta:t}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(p(),{children:[(0,s.jsx)("title",{children:"Łukasz Blachnicki | ".concat(null==t?void 0:t.title)}),(0,s.jsx)("meta",{name:"description",content:"Generated by create next app"}),(0,s.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),(0,s.jsx)(Header,{}),(0,s.jsx)("main",{style:{minHeight:"calc(100vh - 60px - 60px)",display:"flex",flexDirection:"column",boxSizing:"border-box"},children:i}),(0,s.jsx)(Footer,{})]})}},6443:function(e){e.exports={footer:"Footer_footer__yl3k1"}},2975:function(e){e.exports={header:"Header_header__072v2",nav:"Header_nav__evgr5",active:"Header_active__3IUjt"}},3393:function(e){e.exports={container:"project-layout_container__9z9Xf",article:"project-layout_article__rO1vl",toc:"project-layout_toc__OojKx","toc-list":"project-layout_toc-list___5IZn",activeLink:"project-layout_activeLink__t57__",activeLi:"project-layout_activeLi__8Y3RI",link:"project-layout_link__2Mtfg","toc-link":"project-layout_toc-link__zhJ2r"}}},function(e){e.O(0,[290,747,774,888,179],function(){return e(e.s=1251)}),_N_E=e.O()}]);